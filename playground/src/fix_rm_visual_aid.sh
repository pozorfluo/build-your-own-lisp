| r hashes to 6
c is first empty slot at 10
b starts at c

 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[e][f][g][h][i][j][k][l][m][n][ ][o][p][q][ ][ ][ ]  key
[0][0][0][0][1][3][6][6][6][7][ ][-][-][-][ ][ ][ ]  home
[0][1][2][3][3][2][0][1][2][2][ ][0][0][1][ ][ ][ ]  distance
                   |           c
                               b

write c - | at c bucket.distance
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[e][f][g][h][i][j][k][l][m][n][ ][o][p][q][ ][ ][ ]  key
[0][0][0][0][1][3][6][6][6][7][ ][-][-][-][ ][ ][ ]  home
[0][1][2][3][3][2][0][1][2][2][4][0][0][1][ ][ ][ ]  distance
                   |           c
                               b                               

compare b and d .distance
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[e][f][g][h][i][j][k][l][m][n][ ][o][p][q][ ][ ][ ]  key
[0][0][0][0][1][3][6][6][6][7][ ][-][-][-][ ][ ][ ]  home
[0][1][2][3][3][2][0][1][2][2][4][0][0][1][ ][ ][ ]  distance
                   |           c
                            d  b

(b.distance <= d.distance) == false

b--
write c - | at c bucket.distance !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[e][f][g][h][i][j][k][l][m][n][ ][o][p][q][ ][ ][ ]  key
[0][0][0][0][1][3][6][6][6][7][ ][-][-][-][ ][ ][ ]  home 
[0][1][2][3][3][2][0][1][2][2][4][0][0][1][ ][ ][ ]  distance
                   |           c
                         d  b

(b.distance <= d.distance) == true
write b.distance + c - b at c bucket.distance !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 + 10 - 9 = 3
c is now at b
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[e][f][g][h][i][j][k][l][m][n][n][o][p][q][ ][ ][ ]  key
[0][0][0][0][1][3][6][6][6][7][7][-][-][-][ ][ ][ ]  home 
[0][1][2][3][3][2][0][1][2][2][3][0][0][1][ ][ ][ ]  distance
                   |        c  
                         d  b  

b--
write c - | at c bucket.distance !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[e][f][g][h][i][j][k][l][m][n][n][o][p][q][ ][ ][ ]  key
[0][0][0][0][1][3][6][6][6][6][7][-][-][-][ ][ ][ ]  home 
[0][1][2][3][3][2][0][1][2][3][3][0][0][1][ ][ ][ ]  distance
                   |        c  
                      d  b

(b.distance <= d.distance) == false

b--
write c - | at c bucket.distance !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[e][f][g][h][i][j][k][l][m][n][n][o][p][q][ ][ ][ ]  key
[0][0][0][0][1][3][6][6][6][6][7][-][-][-][ ][ ][ ]  home  
[0][1][2][3][3][2][0][1][2][3][3][0][0][1][ ][ ][ ]  distance
                   |        c  
                   d  b

(b.distance <= d.distance) == false


b--
(b == |) == true
break
write c - | at c bucket.distance
write r at c bucket.entry
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[e][f][g][h][i][j][k][l][m][r][n][o][p][q][ ][ ][ ]  key
[0][0][0][0][1][3][6][6][6][6][7][-][-][-][ ][ ][ ]  home  
[0][1][2][3][3][2][0][1][2][3][3][0][0][1][ ][ ][ ]  distance
                   |        c  
                d  b











--------------------------------------------------------------------------------
| k hashes to 8
c is first empty slot at 10
b starts at c

 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[0][1][2][3][3][2][0][1][2][3][ ][0][0][1][ ][ ][ ]
                         |     c
                               b

write c - | at c bucket
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[0][1][2][3][3][2][0][1][2][3][2][0][0][1][ ][ ][ ]
                         |     c
                               b                               

compare b and d
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[0][1][2][3][3][2][0][1][2][3][2][0][0][1][ ][ ][ ]
                         |     c
                            d  b
(b <= d) == true
slingshot
d to b
 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16
[0][1][2][3][3][2][0][1][2][3][2][0][0][1][ ][ ][ ]
                         |     c
                            b  d